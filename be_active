#!/usr/bin/env bash

_="
Sourced at every bash entry, by a source <me> statement added by create to bashrc.

THIS IS SOURCED EVEN IF WE ARE NOT ACTIVE-> do not srew up the sourcer environ!

Our Tasks:
- export an activation function (name of it given in args)
- add us to \$bashenvs_known
- activate our conda if wanted, sourcing bashenv functions and env then


We could be already activated -> then just source be_active via activate.d script
Else activate us if required or just export our activation function
"



usage="Bashenv Activator

Usage [sourced ]: source be_active [OPTIONS] <ARGS>


Options:
None currently

Args:
Positional: <be_active_now> [be_act_func_name]

Actions:

Example:

Activate, no setting of an act_func:

    be_active true


Just register, set an act_func:

    be_active false be_reactive

Note: The create function adds this into .bashrc with an act_func name derived
from your prefix.
"
# We have to take care to not modify environ since we are sourced even if NOT
# active, by .bashrc
# -> prefix everything
# -> -> take care to restore flags:
be_origflags="$-"
trap "be_return_trap; trap - RETURN" RETURN
be_return_trap() {
    for f in e u a x; do [[ $be_origflags == *$f* ]] && set -$f || set +$f; done
}
set -eu

h="$(unset CDPATH && builtin cd "$(dirname "${BASH_SOURCE[0]}")" && builtin pwd)"
be_dir="$h"
be_dvcs="${dvcs:-git}"
# this one we keep, maybe useful for others outside us:
export be_bashenvs_known="${bashenvs_known:-}"

be_exit_sh_help () { echo -e "$usage"; exit ${1:-0}; }

be_parse_cli () {
    while getopts "h" opt; do
        case "$opt" in
            h) be_exit_sh_help;;
            *) be_exit_sh_help 1;;
        esac
    done
    shift $((OPTIND-1))
    # those are set from the .bashrc statement from the installer:
    be_active_now="$1"           ; shift
    be_act_func_name="${1:-}"    ; shift
}

be_derive_conda_prefix_from_be_dir() {
    conda_prefix="$(unset CDPATH && cd "$be_dir/../../../../" && echo $PWD)"
}

be_if_active_then_do_base_activations() {
    test "${CONDA_PREFIX:-}x" == "${conda_prefix}x" && {
        be_base_activations "$conda_prefix"
        return 0
    }
    return 1
}

be_source_config () {
    set -a
    local cp="$1" # might be set by config with some vars there unknown now
    local fn="$conda_prefix/be_config"
    test -e "$fn" && source "$fn"
    conda_prefix="$cp"
    set +a
}

be_base_activations () {
    conda_prefix="$1"
    export be_dir="$conda_prefix/bin/app/environ/bash"
    be_source_config "$conda_prefix"
    source "$be_dir/functions"
    source "$be_dir/aliases"
    add_path "$conda_prefix/bin" # noop if there
}

be_activate_bashenv () {
    test "${1:-}x" == "x" && { echo "require prefix argument"; return 1; } 
    # we export this function - but other bashenvs do the same. So we require:
    local conda_prefix="$1"
    #https://github.com/MDAnalysis/mdanalysis/issues/1739#issuecomment-407390598
    # the error is not catchable w/o a subshell:
    ( source "$conda_prefix/bin/activate" 2>/dev/null; ) || {
        export LD_LIBRARY_PATH="$conda_prefix/lib:${LD_LIBRARY_PATH:-}"
    }
    # now crash, can't fix then:
    source "$conda_prefix/bin/activate"
    # just to be complete regarding environ( e.g. env |grep be_)
    # internally we use CONDA_PREFIX
    export be_prefix="$CONDA_PREFIX"
    be_base_activations "$conda_prefix"
    # when called via the activation function the trap won't run:
    # we anyway want a defined setup:
    set +eux
}

be_make_us_known () {
    we_where_known=true # won't create activation function then
    [[ "$be_bashenvs_known" == *:$conda_prefix:* ]] && return 0
    bashenvs_known="$be_bashenvs_known:$conda_prefix:"
    we_where_known=false
}

be_export_activation_function_if_not_known () {
    $we_where_known && return 0
    test "${be_act_func_name:-}x" == "x" && return 0
    export -f be_activate_bashenv
    export -f be_base_activations
    eval "$be_act_func_name () { be_activate_bashenv \"$conda_prefix\"; }
          export -f $be_act_func_name"
}


main () {
    be_parse_cli $*
    be_derive_conda_prefix_from_be_dir
    be_if_active_then_do_base_activations && return 0 || true
    be_make_us_known
    be_export_activation_function_if_not_known
    $be_active_now && { be_activate_bashenv "$conda_prefix" || return 1; }
    return 0
}

main $*









xxexport_activation_command_for_subprocesses () {
    activate_bash_env () {
        source "$be_dir" $be_features
    }
    export be_features
    export -f activate_bash_env
}


