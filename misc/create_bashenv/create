#!/usr/bin/env bash

me="$0"
unset CDPATH
here="$(cd "$(dirname "$BASH_SOURCE")" && echo $PWD)"

# TODO: understand envs and $conda_ver (hg then in env)
# TODO: the update process of an existing one, for push back into same repo is
# not working (e.g. after config changes)

# CONFIG FILE DEFAULTS:
conda_prefix=
# channels added
channels=
packages=
pips=
base_packages="git constructor"
dvcs=git
HOME="${HOME:-/root}"
be_config_file=

# filename which sets sys.path, which we will turn into PYTHONPATH:
# e.g. a buildout result:
local_pypath_from_sys_path_in=

# just to avoid downloads of conda all the time when creating many envs:
# TODO: diff between 3s and 2:
cached_installer="/tmp/miniconda<conda_ver>-<arch>.sh"

HOME="${HOME:-/root}"
conda_ver="3-latest"
arch="Linux-x86_64"
root_python=
usage="Creates Bashenv Repos From Scratch

By default it commits all files into a DVCS so that you can push the complete
environment to a server - plus see all changes after usage.

Usage: $me [OPTIONS] go

Options:
-b: Bootstrap. We create a bashenv from scratch, i.e. not a new one from within
    an existing install with same prefix.
-c: Read config file [default from any activated bashenv's prefix/be_config file
    Samples in misc/be_configs
-V: Version of conda to use [default: $conda_ver]
-a: Arch of conda to use, e.g. 'Linux-x86_64' [default: $arch]
-C: Use this conda installer file [default: $cached_installer]
-G: Create new .$dvcs repo (requires -D if one exists)
-D: Remove any existing repo before creation of new one
-d: DVCS to use (git or hg) [default: $dvcs]
-P: Push updates back to master
-p: Set bashenv(conda) prefix [default: $conda_prefix].
    This is the directory we will install everything into.
    If we are within another prefix this sets -b (bootstrap mode).
-A: Auto activate, via $HOME/.bashrc.
-N: Do NOT touch bashrc (not even to register the activation function)
-F: Write register function into different file than $HOME/.bashrc
-i: Should we install another python into the root env e.g. via conda install python=3.6

Notes:
-i: Leave empty to use the python in the installer (-V) else say e.g. -i 3.6
-a: See https://repo.continuum.io/miniconda/ regarding what is available for
    Linux-x86_64
-A: By default we just add a function ('be_<your prefix>') to activate on demand
to your .bashrc.

-N: You can prevent any change in your bashrc by this.
    Downsides:
    - Activation then only via sourcing
      <prefix>/bin/app/environ/bash/be_active true
    - No entry into \$be_bashenvs_known
    If you supply a different file via -F then -N has no effect.

-g: If you point to a remote repo, you need git/hg already when running this -
we do not download this as zip, just in order to create this ;-)

Actions:
- Downloads initial conda if not present in $here
- Then runs the flow in main, ending in a git repo.

Example:
$me -rpg https://github.com/axiros/bashenv_kickstart go
"

# reminder: -e fails script also if last statement of a function is false
set -eu


bootstrap_mode=false
remove_existing_repo=false
create_new_repo=false

fn_register_file="$HOME/.bashrc"

# remove all $conda_prefix/pkgs after install:
remove_packages=false
push_back=false

auto_activate_via_bashrc=false
do_touch_bashrc=true


# -------------------------------------------------------------------- internal
_opts="PDc:C:NF:AGd:bp:g:xhV:a:i:"
_take_bashenv_from_conda_prefix=
# fix. always:
_bin_app_env_bash="/bin/app/environ/bash"
_fn_default_readme="$here/README_default.md"
# -----------------------------------------------------------------------------

source_functions () {
    source "$here/../../functions"
}

parse_cli () {
    echo "----"
    echo "$me $*"
    echo "----"
    OPTIND=
    while getopts "$_opts" opt; do
        case "$opt" in
            i) root_python="$OPTARG";;
            d) dvcs="$OPTARG";;
            c) be_config_file_orig="$OPTARG";; # read already for config defaults
            h) exit_sh_help;;
            A) auto_activate_via_bashrc=true;;
            N) do_touch_bashrc=false;;
            b) bootstrap_mode=true;;
            G) create_new_repo=true;;
            D) remove_existing_repo=true;;
            p) conda_prefix="$OPTARG";;
            C) cached_installer="$OPTARG";;
            P) push_back=true;;
            F) fn_register_file="$OPTARG";;
            V) conda_ver="$OPTARG";;
            a) arch="$OPTARG";;
            g) repo_to_update_dir_or_url="$OPTARG";;
            x) set -x;;
            *) exit_sh_help 1
        esac
    done
    shift $((OPTIND-1))
    run_cmd="${1:-}"
    test "${run_cmd:-}x" != "gox" && exit_sh_help 1 || return 0
}

conda_download_url () {
    # you could point this to a conda built by constructor, already containing
    # more stuff:
    echo "https://repo.continuum.io/miniconda/Miniconda$conda_ver-$arch.sh"
}


abspath () {
    local dn="$(dirname "$1")"
    test -e "$dn" || mkdir -p "$dn"
    dn="$(cd "$(dirname "$1")" && pwd)"
    test "x$dn" == "x/" && dn=
    echo "$dn/$(basename "$1")"
}

derive_cached_installer_name_by_conda_ver () {
    cached_installer="${cached_installer/<conda_ver>/$conda_ver}"
    cached_installer="${cached_installer/<arch>/$arch}"
}

derive_target_conda_prefix () {
    test "${conda_prefix:-}x" != "x" || {
        test "${default_prefix:-}x" != "x" && {
          conda_prefix="$default_prefix"
        } || die "Please provide a prefix with -p or \$default_prefix in config"
    }
    conda_prefix="`abspath "$conda_prefix"`"
    ok "We will install into $I$conda_prefix"
}

check_local_paths_present () {
    local p="$local_pypath_from_sys_path_in"
    test "${p:-}x" != "x" && {
        test -e "$p" || \
            die "\$local_pypath_from_sys_path_in (set to $p) not found"
        ok "$p present"
    }
    return 0
}

check_enforce_repo_switches () {
    # Currently we do not support inplace updates so this is actually
    # not needed. But we leave it for later.
    test "${create_new_repo:-}x" == "xtrue"  || {
        $push_back && {
            die "-G (repo create) not set, cannot push back a not existing repo"
        }
        nfo "Not required, wont' create repo"
        return 0
    }
    test -e "$conda_prefix/.$dvcs" || return 0
    $remove_existing_repo || {
        die "-D required to first remove existing repo"
    }
    nfo "Removing existing "$conda_prefix/.$dvcs""
    del "$conda_prefix/.$dvcs"
}

do_bootstrap_remove_existing () {
    test -e "$conda_prefix" || {
        echo "None found at $conda_prefix"
        return 0
    }
    msg="$conda_prefix already present"
    msg="$msg - move it away, then run $me again"
    die "$msg"
}

_xxxfetch_repo_to_update_url () {
    local u="${repo_to_update_dir_or_url:-}"
    test "x$u" == "x" && { echo "none given"; return 0; }
    test -e "$u" && {
        local d="$u/.git"
        test -e "$d" || { "$u has not .git"; return 1; }
        update_git_dir="$d"
        return 0
    }
    which git || { echo "have not git for $u"; return 1; }
    test -e "$conda_prefix.orig" && {
        echo "removing old $conda_prefix.orig"
        del "$conda_prefix.orig"
    }
    git clone  "$u" "$conda_prefix.orig"
    update_git_dir="$conda_prefix.orig/.git"
}


get_miniconda () {
    test -e "$cached_installer" && {
        nfo "already present: $cached_installer"
        return 0
    }
    web_get "`conda_download_url`" "$cached_installer" || die "could not download conda"
}

chmod_conda () {
    chmod +x "$cached_installer"
}

install_conda () {
    "$cached_installer" -b -p "$conda_prefix"
}

activate_conda () {
    ( source "$conda_prefix/bin/activate" ) || {
        export LD_LIBRARY_PATH="$conda_prefix/lib:${LD_LIBRARY_PATH:-}"
        ( source "$conda_prefix/bin/activate" ) || die "could not activate conda"
        warn "Fixing this requires an LD_LIBRARY_PATH addition before conda activation"
    }
    source "$conda_prefix/bin/activate"
    local exe="`python -c 'import sys; print(sys.executable)'`"
    test "$exe" == "$conda_prefix/bin/python" || \
        die "activation error - expected $conda_prefix/bin/python - got $exe"
}
install_other_root_python (){
    test "${root_python:-}x" == "x" && { nfo "no other root python"; return 0; }
    nfo "conda install python=="$root_python""
    conda install -y python=="$root_python" || die "failed"
}

add_base_packages () {
    nfo "Adding base packages $I$base_packages"
    conda install -y $base_packages || die "conda install of $base_packages failed"
    ok 'Base packages completed'
}

mkdir_etc_conda_activate () {
    # contains all activation scripts, sourced:
    # we prepare the directory here:
    mkdir -p "$conda_prefix/etc/conda/activate.d"
}


clean_conda () {
    $remove_packages || return 0
    for d in man pkgs
    do
        del "$conda_prefix/$d"
    done
}

is_hg () {
    test "$dvcs" == "hg"
}

cd_conda () {
    cd "$conda_prefix"
}

create_dvcs_repo () {

    $create_new_repo || {
        nfo "-G not set -> no action"
        return 0
    }

    test -e "$conda_prefix/.$dvcs" || {
        $dvcs init
        is_hg && {
            local fni=".hgignore"
            echo "syntax: glob" > "$fni"

        } || { fni=".gitignore"; del "$fni"; }
        cat "$here/default_ignore_file" >> "$fni"
        $dvcs add "$fni" || true
    }
    test -e "README.md" || cat "$_fn_default_readme" > "README.md"
    nfo "Adding:"
    $dvcs status
    is_hg && hg -q addrem
    is_hg || git add -A
    $dvcs commit -qam 'by create' || true
    return 0
}


do_push_up_to_master () {
    $push_back || { nfo "-P not set -> not pushing back"; return 0; }
    $dvcs push
}

create_act_func_name () {
    # getting a function name which bash accepts:
    act_func_name="`python -sSc "if 1:
    import string
    C = string.digits + string.ascii_letters + '_'
    p, f = '$conda_prefix'.rsplit('/', 1)
    clean = lambda s: ''.join([c for c in s if c in C])
    f, p = (clean(f), clean(p.replace('/', '_')))
    print('be_%s%s' % (f, p))
    " ` "
}


test_success () {
    which python | grep "$conda_prefix" | grep -v grep >/dev/null
    have_be_config_file || return 0

    while read -r line; do
        line="`echo "$line" | xargs`"
        test "${line:-}x" == "x" && continue
        nfo "testing: $line"
        $line || die "$line failed"
    done <<< "${tests:-}"

    while read -r line; do
        line="`echo "$line" | xargs`"
        test "${line:-}x" == "x" && continue
        nfo "testing: python -c $line"
        eval "python -c \"$line\"" || die "Failed:\n$line\n"
    done <<< "${tests_python:-}"

}

do_check_if_located_within_existing_install () {
    local d="$here"
    test "${_take_bashenv_from_conda_prefix:-}x" != "x" && return 0
    while true; do
        test "x$d" == "x/" && return 1
        d="`dirname "$d"`"
        test -e "$d/conda" && {
            _take_bashenv_from_conda_prefix="`dirname "$d"`"
            echo "we are running within bashenv $_take_bashenv_from_conda_prefix"
            return 0
        }
    done
}

do_check_if_conda_is_activated () {
    # if the user did activate a conda we take all from that one then.
    local d="`python -c 'import sys; print(sys.executable)'`"
    d="`dirname "$d"`"
    d="`dirname "$d"`"
    local b="$d$_bin_app_env_bash"
    test -e "$b" || return 1
    echo "activated conda found at "$d". Will take bashenv from $b."
    local h="$_take_bashenv_from_conda_prefix"
    test "${h:-}x" || {
    test "x$h" != "x$d" && echo "(ignoring $h)"
    }
    _take_bashenv_from_conda_prefix="$d"
}

do_activate_existing_for_git_hg () {
    do_check_if_conda_is_activated || \
        do_check_if_located_within_existing_install && \
        export PATH="$_take_bashenv_from_conda_prefix/bin:$PATH"
    do_check_if_conda_is_activated || return 1
}

do_check_set_bootstrap_mode () {
    test "x$_take_bashenv_from_conda_prefix" == "x" && bootstrap_mode=true
    echo "bootstrap mode: $bootstrap_mode"
}

take_bash_env_dir () {
    $bootstrap_mode && { echo "`( cd $here/../../ && pwd )`"; return 0; }
    local s="$_take_bashenv_from_conda_prefix$_bin_app_env_bash"
    test -e "$s" || die "Error, $s not found"
    echo "$s"
}

prevent_copy_into_same_dir () {
    local src="`take_bash_env_dir`"
    case "$conda_prefix" in "$src"*)
        die "Refusing - $conda_prefix within $src"
    esac
}

do_fail_on_no_git_hg () {
    echo -e "$L\nchecking hg"
    hg version | head -n 1 || die "hg not found"
    echo -e "\nchecking git"
    git version || die "git not found"
    ok "both present"
}

copy_base_env_over () {
    local src="`take_bash_env_dir`"
    local dest="$conda_prefix$_bin_app_env_bash"
    tar_pipe "$src" "$dest"
    # could not commit otherwise:
    nfo "removing any $dvcs dirs at $dest"
    ( cd "$dest" && find . | grep '.'$dvcs'$' | xargs rm -rf )
}


do_add_activate_to_bashrc () {
    $do_touch_bashrc || {
        test "${fn_register_file}" == "$HOME/.bashrc" && {
            nfo "-N set -> no change of $HOME/.bashrc"
            return 0
        }
    }
    #$add_activate_to_bashrc || { echo "Not adding to bashrc"; return 0; }
    local fn="$fn_register_file"
    touch "$fn"
    local cmt="# Added by bashenv installer [`date`] $conda_prefix"
    # positional args evaluated there:
    local marker='"'$conda_prefix'/bin/app/environ/bash/be_active"'
    marker="$marker $auto_activate_via_bashrc"
    marker="$marker $act_func_name"

    activation_cmd='source '$marker''
    nfo "Adding to $fn: $activation_cmd"
    # we filter the old one for any existing conda prefix and add the new one:
    local tmp="`mktemp`" # sed !
    cat "$fn" | grep -v "$conda_prefix" > "$tmp"
    # this is working even if .bashrc is a symlink, we do not create a new
    # file with this but change the old one:
    cat "$tmp" > "$fn"
    echo "$cmt" >> "$fn"
    echo "$activation_cmd" >> "$fn"
    /bin/rm -f "$tmp"
}


have_be_config_file () {
    test "${be_config_file:-}x" != "x"
}

source_configfile () {
    # scan all opts first for a -c <config file>
    while getopts "$_opts" opt; do
        case "$opt" in
            c) be_config_file="`readlink -f "$OPTARG"`";; # abspath, we will cd
            *) true;;
        esac
    done

    have_be_config_file || {
        local ec="${_take_bashenv_from_conda_prefix:-xx}/be_config"
        test -e "$ec" && {
            be_config_file="$ec"
        }
    }
    have_be_config_file || {
        warn "no config file"
        return 0
    }
    set -a
    nfo "Sourcing $be_config_file"
    source "$be_config_file" || exit_sh_help 1
    set +a
}

add_channels () {
    for c in $channels; do
        nfo "Adding channel $c"
        conda config --add channels "$c"
    done
}

add_packages () {
    while read -r line; do
        line="`echo "$line" | xargs`"
        test "${line:-}x" == "x" && continue
        nfo "conda install $line"
        conda install -y $line
    done <<< "$packages"
}

add_pips () {
    for c in $pips; do
        nfo "Adding pip $c"
        pip install "$c"
    done
}

add_locals () {
    # we append the sys.path for local stuff at the end by default,
    # so that conda still works nicely and does not conflict:
    local lpfs="$local_pypath_from_sys_path_in"
    test "${lpfs:-}x" == "x" && return 0
    local d="`mktemp -d`"
    cp "$lpfs" "$d/lpfs.py"
    local pp="`( cd "$d" && python -c 'if 1:
        import sys
        h=list(sys.path)
        import lpfs
        # add those at end:
        h.extend( [i for i in sys.path if not i in h] )
        print(":".join(h))'
    )`"
    d="$conda_prefix/etc/conda/activate.d/local_pypath_from_sys.sh"
    # remember if path alraeady set, this is sourced for every subshell:
    echo "# from $lpfs:" > "$d"
    echo 'test "${be_syspath_set:-}x" == "truex" && return 0' >> "$d"
    echo 'export PYTHONPATH="'$pp':${PYTHONPATH:-}"' >> "$d"
    echo 'export be_syspath_set=true' >> "$d"
    nfo "have written $d:"
    cat "$d"
}

force_utf8 () {
    # on py2 there were problems sourcing activtion shell scripts with unicode.
    # they went away after setting FILESSYSTEMENCODING away from
    # ANSI_X3.4-1968o to utf-8
    # Reason: In conda/activate.py they try decode all env vars via the
    # FSEncoding - crashing, when utf-8 stuff is in the environ, since default
    # sys.getfilesystemencoding() is some strange 1970's one.
    # lets force all utf-8 and get fine python2:
    test -e "$conda_prefix/lib/python2.7/" || return 0
    local lc="$conda_prefix/lib/python2.7/sitecustomize.py"
    nfo "This is a python2 install, so we do set default[FS]encoding"
    sh cp "$here/utf8_2.7_sitecustomize.py" "$lc"
    sh cat "$lc"
}

write_be_config () {
    # remember the config with which this bashenv was created
    local c="$conda_prefix/be_config"
    echo "# `date`"     > "$c"
    echo "# by $me $*" >> "$c"
    `have_be_config_file` && {
        echo "# config contents:"
        cat "$be_config_file" >> "$c"
    }
    echo >> "$c"
}


show_info () {
    echo "Init conda installed."
    echo "prefix: "$conda_prefix""
    echo "base_packages: "$base_packages""
    echo
    $create_new_repo && echo ".$dvcs is updated"
    $push_back && echo "The repo was pushed" || {
        $create_new_repo && echo "The repo can be pushed" || echo "no repo created"
    }
    echo ""
}


main () {
    source_functions
    # sh just prints the command before running (defined in 'functions')
    sh do_check_if_conda_is_activated || true
    sh do_check_if_located_within_existing_install || true
    sh source_configfile $*
    parse_cli $* || exit_sh_help
    sh derive_cached_installer_name_by_conda_ver
    sh derive_target_conda_prefix
    sh check_local_paths_present
    sh check_enforce_repo_switches
    sh do_activate_existing_for_git_hg || true
    sh do_check_set_bootstrap_mode
    sh prevent_copy_into_same_dir
    # sh do_bootstrap_remove_existing
    # sh fetch_repo_to_update_url || die "Error fetching repo"
    $bootstrap_mode && {
        sh do_bootstrap_remove_existing
        sh get_miniconda
        sh chmod_conda
        sh install_conda
        sh force_utf8
        sh activate_conda
        sh install_other_root_python
        sh add_base_packages
    }
    sh mkdir_etc_conda_activate
    #sh do_fail_on_no_git_hg # hg no more currently
    sh copy_base_env_over
    sh add_channels
    sh add_packages
    sh add_pips
    sh add_locals
    sh force_utf8
    sh write_be_config $*
    sh clean_conda
    sh cd_conda
    sh test_success
    sh create_dvcs_repo
    sh create_act_func_name
    sh do_add_activate_to_bashrc
    sh do_push_up_to_master
    show_info
}

# sourced? then return
[[ "${BASH_SOURCE[0]}" != "${0}" ]] && return 0

main $*
